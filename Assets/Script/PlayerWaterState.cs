using DiasGames.Components;
using DiasGames;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
//????????????private PlayerWaterState  
//
public class PlayerWaterState : MonoBehaviour
{   
    /// <summary>
    ///???®∞???,???????????
    /// </summary>
    [Header("Water Settings")]
    [SerializeField] private float _maxWater = 100f;
    public float MaxWater => _maxWater; // ???????
    [SerializeField] private float defaultSpray = 10f; // ???????????
    [SerializeField] private float criticalThreshold = 0.2f; // ¶≤????????????

    /// <summary>
    /// ?????????? ????????>??
    /// </summary>
    public UnityEvent<float> OnWaterChanged;       // ????Å£???????????????????
    public UnityEvent OnWaterCritical;             // ????¶≤????
    public UnityEvent OnWaterDepleted;             // ??????
   

    /// <summary>
    /// ????????
    /// </summary>
    public float CurrentWater { get; private set; }
    public bool IsInCritical { get; private set; }
    private bool _isDepleted = false;
    //?????????
    private void Awake()
    {
        OnWaterChanged ??= new UnityEvent<float>();
        OnWaterCritical = OnWaterCritical ?? new UnityEvent();
        OnWaterDepleted = OnWaterDepleted ?? new UnityEvent();
      
        CurrentWater = MaxWater;
    }

    /// <summary>
    /// ?????????????????????????????
    /// QTE????,??????
    /// </summary>
    public void ChangeWater()
    {
        ModifyWater(-defaultSpray);
    }

    /// <summary>
    /// ????????????????????????
    /// ??????????????,?????????????
    /// </summary>
    /// <param name="amount">?????????????????</param>
    public void ChangeWater(float amount)
    {
        ModifyWater(amount);
    }

    /// <summary>
    /// ?????????????
    /// ????????õœ?????
    /// </summary>
    public void ResetWater()
    {
        _isDepleted = false;
        CurrentWater = MaxWater;
        IsInCritical = false;
        OnWaterChanged?.Invoke(1f);
    }

    /// <summary>
    /// ????????????(??ß›?????????????)
    /// ???????
    /// </summary>
    /// <param name="delta"></param>

    private void ModifyWater(float delta)
    {
        if (_isDepleted) return; // ????????????
        float previous = CurrentWater;
        CurrentWater = Mathf.Clamp(CurrentWater + delta, 0, MaxWater);

        // ????????Å£???
        if (!Mathf.Approximately(previous, CurrentWater))
        {
            float percent = CurrentWater / MaxWater;
            //????????Å£???,??????UI?????
            OnWaterChanged?.Invoke(percent);
        }
        //??????????¶≤?????
        CheckCriticalState();
        //???????????
        CheckDepletion();
 
    
    }


    /// <summary>
    ///  // ¶≤??????? ????20???
    /// </summary>
    private void CheckCriticalState()
    {
        float currentPercent = CurrentWater / MaxWater;
        bool isNowCritical = currentPercent <= criticalThreshold;

        if (isNowCritical != IsInCritical)
        {
            IsInCritical = isNowCritical;
            if (IsInCritical)
                OnWaterCritical?.Invoke();
        }
    }

    /// <summary>
    /// ?????,???????
    /// </summary>
    private void CheckDepletion()
    {
        if (!_isDepleted && CurrentWater <= Mathf.Epsilon)
        {
            _isDepleted = true; // ????????
            OnWaterDepleted?.Invoke();
        }
        else if (CurrentWater > Mathf.Epsilon)
        {
            _isDepleted = false; // ??????
        }
    }
    /// <summary>
    /// ?????ß›??????,???????
    /// </summary>
    private void OnDestroy()
    {
        OnWaterChanged.RemoveAllListeners();
        OnWaterCritical.RemoveAllListeners();
        OnWaterDepleted.RemoveAllListeners();
    }
}


